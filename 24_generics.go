// Начиная с версии 1.18, Go добавил поддержку _обобщений_,
// также известных как _параметры типа_.

package main

import "fmt"

// В качестве примера обобщенной функции, `SlicesIndex` принимает
// срез любого `сравнимого` типа и элемент этого
// типа, возвращая индекс первого вхождения
// v в s, или -1, если элемент отсутствует. Ограничение `comparable`
// означает, что мы можем сравнивать значения этого типа с помощью
// операторов `==` и `!=`. Для более подробного объяснения
// этой сигнатуры типа смотрите [этот блог пост](https://go.dev/blog/deconstructing-type-parameters).
// Обратите внимание, что эта функция существует в стандартной библиотеке
// как [slices.Index](https://pkg.go.dev/slices#Index).
func SlicesIndex[S ~[]E, E comparable](s S, v E) int {
	for i := range s {
		if v == s[i] {
			return i
		}
	}
	return -1
}

// В качестве примера обобщенного типа, `List` представляет
// собой однонаправленный список со значениями любого типа.
type List[T any] struct {
	head, tail *element[T]
}

type element[T any] struct {
	next *element[T]
	val  T
}

// Мы можем определять методы для обобщенных типов так же, как
// и для обычных типов, но нам нужно сохранять параметры типа.
// Тип - `List[T]`, а не просто `List`.
func (lst *List[T]) Push(v T) {
	if lst.tail == nil {
		lst.head = &element[T]{val: v}
		lst.tail = lst.head
	} else {
		lst.tail.next = &element[T]{val: v}
		lst.tail = lst.tail.next
	}
}

// AllElements возвращает все элементы списка в виде среза.
// В следующем примере мы увидим более идиоматичный способ
// итерации по всем элементам пользовательских типов.
func (lst *List[T]) AllElements() []T {
	var elems []T
	for e := lst.head; e != nil; e = e.next {
		elems = append(elems, e.val)
	}
	return elems
}

func main() {
	var s = []string{"foo", "bar", "zoo"}

	// При вызове обобщенных функций мы часто можем полагаться
	// на _вывод типа_. Обратите внимание, что нам не нужно
	// указывать типы для `S` и `E` при вызове `SlicesIndex` -
	// компилятор автоматически выводит их.
	fmt.Println("index of zoo:", SlicesIndex(s, "zoo"))

	// ... хотя мы также могли бы указать их явно.
	_ = SlicesIndex[[]string, string](s, "zoo")

	lst := List[int]{}
	lst.Push(10)
	lst.Push(13)
	lst.Push(23)
	fmt.Println("list:", lst.AllElements())
}

// Объяснение:
// Обобщенные функции:

// Функция SlicesIndex является обобщенной функцией, которая работает с любым срезом (S ~[]E), где элементы (E) могут быть сравнены (т.е., реализуют интерфейс comparable).
// Она возвращает индекс первого вхождения элемента v в срезе s или -1, если элемент не найден.
// Обобщенные типы:

// List[T] представляет собой обобщенный тип для однонаправленного списка. Элементы списка могут быть любого типа T.
// Методы Push и AllElements работают с обобщенным типом T, позволяя создавать списки и выполнять операции над элементами независимо от их типа.
// Использование обобщений:

// Обобщенные функции и типы позволяют писать более универсальный и переиспользуемый код. Вы можете создавать функции и структуры, которые работают с различными типами данных, при этом сохраняя строгую типобезопасность.
// Обобщения в Go предоставляют мощный способ управления типами, упрощая код и повышая его гибкость.
