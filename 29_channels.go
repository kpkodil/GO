// _Каналы_ - это каналы, которые соединяют конкурентные
// горутины. Вы можете отправлять значения в каналы из одной
// горутины и получать эти значения в другой горутине.

package main

import "fmt"

func main() {

	// Создаем новый канал с помощью `make(chan тип-значения)`.
	// Каналы типизируются в соответствии с передаваемыми значениями.
	messages := make(chan string)

	// _Отправляем_ значение в канал, используя синтаксис `канал <-`.
	// Здесь мы отправляем `"ping"` в канал `messages`, который
	// создали выше, из новой горутины.
	go func() { messages <- "ping" }()

	// Синтаксис `<-канал` _получает_ значение из канала.
	// Здесь мы получаем сообщение `"ping"`, которое отправили выше, и выводим его.
	msg := <-messages
	fmt.Println(msg)
}

// В Go каналы (channels) играют ключевую роль в коммуникации и синхронизации между goroutines. Они позволяют передавать данные между goroutines и управлять потоками выполнения. Вот краткое объяснение основных аспектов работы с каналами, включая полный пример.

// Основы Работы с Каналами
// Создание Канала:

// Канал создается с помощью функции make с указанием типа передаваемых значений.
// Пример:
// messages := make(chan string)

// Отправка Значений в Канал:
// Используется синтаксис channel <- value для отправки значений в канал.
// Пример:
// go func() { messages <- "ping" }()

// Получение Значений из Канала:
// Используется синтаксис <- channel для получения значений из канала.
// Пример:

// msg := <-messages
