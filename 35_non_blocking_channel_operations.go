// Основные операции отправки и получения на каналах являются блокирующими.
// Однако мы можем использовать `select` с `default`-кейсом для реализации
// _неблокирующих_ отправок, получений и даже неблокирующих многоканальных `select`.

package main

import "fmt"

func main() {
	messages := make(chan string)
	signals := make(chan bool)

	// Неблокирующее получение. Если значение доступно на канале `messages`,
	// то `select` выберет кейс `<-messages` с этим значением. Если нет,
	// он немедленно выберет `default`-кейс.
	select {
	case msg := <-messages:
		fmt.Println("получено сообщение", msg)
	default:
		fmt.Println("нет полученного сообщения")
	}

	// Неблокирующая отправка работает аналогично. Здесь сообщение `msg`
	// не может быть отправлено в канал `messages`, так как канал не имеет
	// буфера и нет получателя. Поэтому выбирается `default`-кейс.
	msg := "hi"
	select {
	case messages <- msg:
		fmt.Println("отправлено сообщение", msg)
	default:
		fmt.Println("сообщение не отправлено")
	}

	// Мы можем использовать несколько `case` до `default`-кейса для
	// реализации многоканального неблокирующего `select`. Здесь мы
	// пытаемся сделать неблокирующее получение как из `messages`, так
	// и из `signals`.
	select {
	case msg := <-messages:
		fmt.Println("получено сообщение", msg)
	case sig := <-signals:
		fmt.Println("получен сигнал", sig)
	default:
		fmt.Println("нет активности")
	}
}

// Пояснение:
// Неблокирующее получение:

// В первом select используется неблокирующее получение из канала messages. Если на канале есть данные, они будут получены и выведены. Если данных нет, сразу будет выполнен default-кейс, выводящий "нет полученного сообщения".
// Неблокирующая отправка:

// Во втором select осуществляется попытка отправить сообщение msg в канал messages. Поскольку канал не имеет буфера и нет получателя, отправка блокировалась бы, поэтому выбирается default-кейс, выводящий "сообщение не отправлено".
// Многоканальный неблокирующий select:

// В третьем select мы пытаемся выполнить неблокирующее получение из обоих каналов (messages и signals). Поскольку каналы пусты и нет активности, default-кейс выполнится и выведет "нет активности".

// Неблокирующие операции позволяют избежать блокировки выполнения программы, что полезно в ситуациях, когда вы хотите проверить доступность данных или ресурсов без ожидания.

// Это особенно полезно для реализации различных тайм-аутов, периодических проверок или для обработки нескольких каналов одновременно, не блокируя основную логику программы.
