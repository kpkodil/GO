// _range_ перебирает элементы в различных встроенных
// структурах данных. Давайте посмотрим, как использовать `range`
// с некоторыми из структур данных, которые мы уже изучили.

package main

import "fmt"

func main() {

	// Здесь мы используем `range` для суммирования чисел в срезе.
	// Массивы работают так же.
	nums := []int{2, 3, 4}
	sum := 0
	for _, num := range nums {
		sum += num
	}
	fmt.Println("sum:", sum)

	// `range` для массивов и срезов предоставляет как
	// индекс, так и значение для каждого элемента. В предыдущем
	// примере индекс нам не был нужен, поэтому мы игнорировали его
	// с помощью пустого идентификатора `_`. Иногда нам действительно
	// нужны индексы.
	for i, num := range nums {
		if num == 3 {
			fmt.Println("index:", i)
		}
	}

	// `range` для карт перебирает пары ключ/значение.
	kvs := map[string]string{"a": "apple", "b": "banana"}
	for k, v := range kvs {
		fmt.Printf("%s -> %s\n", k, v)
	}

	// `range` также может перебирать только ключи карты.
	for k := range kvs {
		fmt.Println("key:", k)
	}

	// `range` для строк перебирает кодовые точки Unicode.
	// Первое значение — это начальный байтовый индекс `rune`,
	// а второе — сама `rune`. См. [Строки и Runes](strings-and-runes) для
	// дополнительных сведений.
	for i, c := range "go" {
		fmt.Println(i, c)
	}
}
