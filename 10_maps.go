// _Карты_ — это встроенный в Go [ассоциативный тип данных](https://en.wikipedia.org/wiki/Associative_array)
// (иногда называемый _хэшами_ или _словарями_ в других языках).

package main

import (
	"fmt"
	"maps"
)

func main() {

	// Чтобы создать пустую карту, используйте встроенную функцию `make`:
	// `make(map[key-type]val-type)`.
	m := make(map[string]int)

	// Установите пары ключ/значение с помощью обычного синтаксиса `name[key] = val`.
	m["k1"] = 7
	m["k2"] = 13

	// Печать карты с помощью, например, `fmt.Println` покажет все её пары ключ/значение.
	fmt.Println("map:", m)

	// Получите значение для ключа с помощью `name[key]`.
	v1 := m["k1"]
	fmt.Println("v1:", v1)

	// Если ключ не существует, будет возвращено
	// [нулевое значение](https://go.dev/ref/spec#The_zero_value) для типа значения.
	v3 := m["k3"]
	fmt.Println("v3:", v3)

	// Встроенная функция `len` возвращает количество пар ключ/значение в карте.
	fmt.Println("len:", len(m))

	// Встроенная функция `delete` удаляет пары ключ/значение из карты.
	delete(m, "k2")
	fmt.Println("map:", m)

	// Чтобы удалить *все* пары ключ/значение из карты, используйте
	// встроенную функцию `clear`.
	clear(m)
	fmt.Println("map:", m)

	// Второе возвращаемое значение при получении значения из карты указывает,
	// был ли ключ присутствует в карте. Это может использоваться для
	// различения отсутствующих ключей и ключей с нулевыми значениями,
	// такими как `0` или `""`. Здесь значение само по себе не нужно,
	// поэтому мы игнорируем его с помощью _пустого идентификатора_ `_`.
	_, prs := m["k2"]
	fmt.Println("prs:", prs)

	// Вы также можете объявить и инициализировать новую карту в одной строке с помощью этого синтаксиса.
	n := map[string]int{"foo": 1, "bar": 2}
	fmt.Println("map:", n)

	// Пакет `maps` содержит множество полезных функций для карт.
	n2 := map[string]int{"foo": 1, "bar": 2}
	if maps.Equal(n, n2) {
		fmt.Println("n == n2")
	}
}
