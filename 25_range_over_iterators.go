// Начиная с версии 1.23, Go добавил поддержку
// [итераторов](https://go.dev/blog/range-functions),
// что позволяет нам итерировать практически по всему!

package main

import (
	"fmt"
	"iter"
	"slices"
)

// Давайте снова рассмотрим тип `List` из
// [предыдущего примера](generics). В том примере
// у нас был метод `AllElements`, который возвращал срез
// всех элементов в списке. С итераторами Go мы можем
// сделать это лучше - как показано ниже.
type List[T any] struct {
	head, tail *element[T]
}

type element[T any] struct {
	next *element[T]
	val  T
}

func (lst *List[T]) Push(v T) {
	if lst.tail == nil {
		lst.head = &element[T]{val: v}
		lst.tail = lst.head
	} else {
		lst.tail.next = &element[T]{val: v}
		lst.tail = lst.tail.next
	}
}

// All возвращает _итератор_, который в Go представляет собой функцию
// со [специальной сигнатурой](https://pkg.go.dev/iter#Seq).
func (lst *List[T]) All() iter.Seq[T] {
	return func(yield func(T) bool) {
		// Итератор принимает другую функцию в качестве параметра,
		// называемую `yield` по соглашению (но имя может быть произвольным).
		// Он вызывает `yield` для каждого элемента, по которому мы хотим итерировать,
		// и учитывает возвращаемое значение `yield` для потенциального досрочного завершения.
		for e := lst.head; e != nil; e = e.next {
			if !yield(e.val) {
				return
			}
		}
	}
}

// Итерация не требует исходной структуры данных,
// и даже не обязательно должна быть конечной! Вот функция,
// возвращающая итератор по числам Фибоначчи: она продолжает
// работать, пока `yield` возвращает `true`.
func genFib() iter.Seq[int] {
	return func(yield func(int) bool) {
		a, b := 1, 1

		for {
			if !yield(a) {
				return
			}
			a, b = b, a+b
		}
	}
}

func main() {
	lst := List[int]{}
	lst.Push(10)
	lst.Push(13)
	lst.Push(23)

	// Поскольку `List.All` возвращает итератор, мы можем использовать его
	// в обычном цикле `range`.
	for e := range lst.All() {
		fmt.Println(e)
	}

	// Пакеты, такие как [slices](https://pkg.go.dev/slices), содержат
	// множество полезных функций для работы с итераторами.
	// Например, `Collect` принимает любой итератор и собирает
	// все его значения в срез.
	all := slices.Collect(lst.All())
	fmt.Println("all:", all)

	for n := range genFib() {

		// Как только цикл встречает `break` или досрочный возврат,
		// функция `yield`, переданная итератору, вернёт `false`.
		if n >= 10 {
			break
		}
		fmt.Println(n)
	}
}

// Объяснение:
// Обобщенный список (List):

// List — это обобщённый тип, реализующий однонаправленный список. Методы Push и All позволяют добавлять элементы в список и итерировать по ним, соответственно.

// Итератор:
// Метод All возвращает итератор, который представляет собой функцию. Этот итератор позволяет итерировать по элементам списка. Функция yield передаётся в итератор и вызывается для каждого элемента списка.

// Генерация последовательностей:
// Функция genFib возвращает итератор для генерации чисел Фибоначчи. Этот итератор бесконечен и будет генерировать числа, пока yield возвращает true.

// Использование итераторов:
// Итераторы могут использоваться в циклах range и с функциями, такими как slices.Collect, которые помогают собирать значения из итераторов в срезы или выполнять другие операции.
// Итераторы в Go открывают новые возможности для работы с последовательностями данных и упрощают многие операции, которые раньше могли быть более сложными.
