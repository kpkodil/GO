// Строка в Go — это доступный только для чтения срез байтов. Язык
// и стандартная библиотека обращаются со строками особым образом — как
// с контейнерами текста, закодированного в [UTF-8](https://en.wikipedia.org/wiki/UTF-8).
// В других языках строки состоят из "символов".
// В Go концепция символа называется `rune` — это целое число,
// представляющее кодовую точку Unicode.
// [Этот пост в блоге Go](https://go.dev/blog/strings) является хорошим
// введением в тему.

package main

import (
	"fmt"
	"unicode/utf8"
)

func main() {

	// `s` — это `string`, присвоенная литеральному значению
	// представляющему слово "hello" на тайском языке. Литералы строк в Go
	// закодированы в формате UTF-8.
	const s = "สวัสดี"

	// Поскольку строки эквивалентны `[]byte`, это
	// даст длину сырых байтов, хранящихся внутри.
	fmt.Println("Len:", len(s))

	// Индексирование строки возвращает сырые байтовые значения на
	// каждом индексе. Этот цикл генерирует шестнадцатеричные значения всех
	// байтов, составляющих кодовые точки в `s`.
	for i := 0; i < len(s); i++ {
		fmt.Printf("%x ", s[i])
	}
	fmt.Println()

	// Чтобы посчитать, сколько _рунов_ в строке, мы можем использовать
	// пакет `utf8`. Обратите внимание, что время выполнения
	// `RuneCountInString` зависит от размера строки,
	// потому что функция должна декодировать каждую UTF-8 руну последовательно.
	// Некоторые тайские символы представлены кодовыми точками UTF-8,
	// которые могут занимать несколько байтов, поэтому результат этого подсчета
	// может быть неожиданным.
	fmt.Println("Rune count:", utf8.RuneCountInString(s))

	// Цикл `range` обрабатывает строки особым образом и декодирует
	// каждую `rune` вместе с её смещением в строке.
	for idx, runeValue := range s {
		fmt.Printf("%#U starts at %d\n", runeValue, idx)
	}

	// Мы можем достигнуть того же итерационного результата,
	// явно используя функцию `utf8.DecodeRuneInString`.
	fmt.Println("\nUsing DecodeRuneInString")
	for i, w := 0, 0; i < len(s); i += w {
		runeValue, width := utf8.DecodeRuneInString(s[i:])
		fmt.Printf("%#U starts at %d\n", runeValue, i)
		w = width

		// Это демонстрирует передачу значения `rune` в функцию.
		examineRune(runeValue)
	}
}

func examineRune(r rune) {

	// Значения, заключенные в одинарные кавычки, являются _литералами rune_.
	// Мы можем напрямую сравнить значение `rune` с литералом rune.
	if r == 't' {
		fmt.Println("found tee")
	} else if r == 'ส' {
		fmt.Println("found so sua")
	}
}
