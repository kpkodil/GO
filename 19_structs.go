// _Структуры_ в Go — это типизированные коллекции полей.
// Они полезны для группировки данных вместе для формирования
// записей.

package main

import "fmt"

// Этот тип структуры `person` имеет поля `name` и `age`.
type person struct {
	name string
	age  int
}

// `newPerson` создает новую структуру person с заданным именем.
func newPerson(name string) *person {
	// Go — это язык с автоматическим сбором мусора; вы можете безопасно
	// возвращать указатель на локальную переменную — она будет очищена
	// сборщиком мусора только тогда, когда на неё не останется активных
	// ссылок.
	p := person{name: name}
	p.age = 42
	return &p
}

func main() {

	// Этот синтаксис создает новую структуру.
	fmt.Println(person{"Bob", 20})

	// Вы можете указать имена полей при инициализации структуры.
	fmt.Println(person{name: "Alice", age: 30})

	// Пропущенные поля будут иметь нулевые значения.
	fmt.Println(person{name: "Fred"})

	// Префикс `&` дает указатель на структуру.
	fmt.Println(&person{name: "Ann", age: 40})

	// Обычно создание новых структур инкапсулируется в функции-конструкторы.
	fmt.Println(newPerson("Jon"))

	// Доступ к полям структуры осуществляется с помощью точки.
	s := person{name: "Sean", age: 50}
	fmt.Println(s.name)

	// Вы также можете использовать точки с указателями на структуры —
	// указатели автоматически разыменовываются.
	sp := &s
	fmt.Println(sp.age)

	// Структуры изменяемы.
	sp.age = 51
	fmt.Println(sp.age)

	// Если тип структуры используется только для одного значения,
	// мы не обязаны давать ему имя. Значение может иметь анонимный
	// тип структуры. Эта техника часто используется для
	// [тестов на основе таблиц](testing-and-benchmarking).
	dog := struct {
		name   string
		isGood bool
	}{
		"Rex",
		true,
	}
	fmt.Println(dog)
}
